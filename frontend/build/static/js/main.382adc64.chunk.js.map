{"version":3,"sources":["Memes.js","App.js","reportWebVitals.js","index.js"],"names":["Meme","props","cards","cnt","data","map","element","className","name","caption","src","url","alt","width","height","App","useState","form","setForm","memes","setMeme","dataId","setId","useEffect","document","title","axios","get","then","res","catch","error","console","log","noValidate","Grid","container","spacing","item","xs","sm","TextField","autoComplete","value","variant","required","fullWidth","id","label","autoFocus","onChange","event","target","Button","type","color","onClick","Event","preventDefault","post","response","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.382adc64.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Memes.css';\r\n\r\nfunction Meme( props )\r\n{\r\n    var cards =[]; \r\n    let cnt = 0;\r\n     cards = props.data.map( element => {\r\n        \r\n           return ( \r\n           <div key={cnt++} className=\"card\" >\r\n                <div className = \"container\">\r\n                    <h1>{element.name}</h1>\r\n                    <p>{element.caption}</p>\r\n                </div>\r\n                <img src={element.url} alt = \"memeImage\" width=\"400\" height=\"400\" ></img>\r\n            </div>);\r\n    });\r\n    return <div className=\"cards\">{cards}</div>;\r\n};\r\n\r\nexport default Meme;","import './App.css';\nimport React ,{ useEffect  , useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Meme from './Memes.js';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport axios from 'axios';\n\nfunction App() {\n\n   var [form , setForm ] = useState({ name : '' , caption : '' , url : '' });\n   var [memes , setMeme] = useState([]);\n   var [dataId , setId]= useState([]);\n\n   useEffect( () => { \n\n    document.title = 'Xmemes';\n    axios.get('https://memerhub.herokuapp.com/memes')\n    .then( ( res ) => { \n      setMeme( res.data );\n     })\n    .catch( (error) => { console.log(error); }); \n\n    axios.get('https://memerhub.herokuapp.com/memes/ids' )\n    .then( ( res ) => { \n      setId(res.data);\n    })\n    .catch( error => { console.log(error) });\n\n   } , []);\n\n  var handelSubmitMeme = ( Event ) =>{\n    \n    Event.preventDefault();\n    // console.log(form);\n\n    axios.post('https://memerhub.herokuapp.com/memes' , form )\n    .then( ( response ) => { \n      setMeme( memes => [form ,...memes ] );\n      // console.log(response);  \n      setForm({ name : \"\" , url : \"\" , caption : \"\" });\n    })\n    .catch( (error) => { \n      console.log(error); \n    });\n\n  };\n\n  return (\n    <div>\n      <div className=\"header\">\n        <h1 className =\"top\" > Meme Stream </h1>\n      </div>\n      <div className =\"form\" >\n        <form noValidate>\n            <Grid container spacing={2}>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  autoComplete=\"name\" \n                  value = { form.name }\n                  name=\"name\"\n                  variant=\"outlined\"\n                  required\n                  fullWidth\n                  id=\"name\"\n                  label=\"name\"\n                  autoFocus\n                  onChange = { (event) => {  setForm({...form , name : event.target.value} ) } }\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  autoComplete=\"caption\" \n                  value = { form.caption }\n                  name=\"caption\"\n                  variant=\"outlined\"\n                  required\n                  fullWidth\n                  id=\"caption\"\n                  label=\"caption\"\n                  autoFocus\n                  onChange = { (event) => {  setForm({...form , caption : event.target.value} ) } }\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  variant=\"outlined\" \n                  value = { form.url }\n                  required\n                  fullWidth\n                  id=\"URL\"\n                  label=\"url\"\n                  name=\"url\"\n                  autoComplete=\"url\"\n                  onChange = { (event) => {  setForm({...form , url : event.target.value} ) } }\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n              <Button type=\"submit\"  variant=\"contained\"  color=\"primary\" onClick = {handelSubmitMeme} >\n                Submit Meme\n              </Button>\n              </Grid>\n            </Grid>\n        </form>  \n      </div>\n      <div>\n        <Meme data = { memes } dataId = { dataId } />\n      </div>\n      <div className=\"footer\"> \n        {'XMEME By Satyendra Tiwari'}\n      </div>\n  </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}